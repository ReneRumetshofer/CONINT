name: Pipeline

on:
  push:
    branches:
      - main
      - production

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/backend

jobs:
  update-local-repo:
    name: Update repo on host
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          script: |
            cd /opt/CONINT && \
            sudo git pull

  sonarqube_scan_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: -Dsonar.projectBaseDir=backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        with:
          scanMetadataReportFile: backend/.scannerwork/report-task.txt
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sonarqube_scan_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: -Dsonar.projectBaseDir=frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        with:
          scanMetadataReportFile: frontend/.scannerwork/report-task.txt
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  vulnerability_scan:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: snyk/actions/setup@master
      - uses: actions/setup-node@v4
      - name: Snyk monitor
        run: snyk monitor --all-projects --org=${{ secrets.SNYK_ORG }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Snyk test
        run: snyk test --all-projects --org=${{ secrets.SNYK_ORG }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: [ sonarqube_scan_backend, sonarqube_scan_frontend, vulnerability_scan ]
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm ci
      - run: npm run eslint
      - run: npm run jest
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage/lcov-report

  test-frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: [ sonarqube_scan_backend, sonarqube_scan_frontend, vulnerability_scan ]
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm ci
      - run: npm run eslint
      - run: npm run jest
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage/lcov-report

  build-deliver-backend-image:
    name: Build & Deliver Backend Image
    needs: test-backend
    secrets: inherit
    uses: ./.github/workflows/build-and-deliver.yml
    with:
      working-directory: backend
      dockerhub-repository: secret-notes-backend
      image-artifact-name: backend-image

  build-deliver-frontend-image:
    name: Build & Deliver Frontend Image
    needs: test-frontend
    secrets: inherit
    uses: ./.github/workflows/build-and-deliver.yml
    with:
      working-directory: frontend
      dockerhub-repository: secret-notes-frontend
      image-artifact-name: frontend-image

  deploy-green:
    name: Deploy new Green version
    runs-on: ubuntu-latest
    needs: [ build-deliver-backend-image, build-deliver-frontend-image, update-local-repo ]
    #if: github.ref == 'refs/heads/production'
    outputs:
      image-tag: ${{ steps.tag.outputs.image-tag }}
    steps:
      - name: Get commit SHA
        id: tag
        run: echo "image-tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Deploy new green version
        uses: appleboy/ssh-action@v1
        env:
          GREEN_BACKEND_TAG: ${{ steps.tag.outputs.image-tag }}
          GREEN_FRONTEND_TAG: ${{ steps.tag.outputs.image-tag }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          envs: GREEN_BACKEND_TAG,GREEN_FRONTEND_TAG
          script: |
            cd /opt/CONINT && \
            echo 'Deploying Frontend to green...' && \
            docker-compose -f stacks/secret_notes/docker-compose-secret-notes-green.yml down frontend-green && \
            IMAGE_TAG=${GREEN_FRONTEND_TAG} docker-compose -f stacks/secret_notes/docker-compose-secret-notes-green.yml up -d --build frontend-green && \
            echo 'Deploying Backend to green...' && \
            docker-compose -f stacks/secret_notes/docker-compose-secret-notes-green.yml down backend-green && \
            IMAGE_TAG=${GREEN_BACKEND_TAG} docker-compose -f stacks/secret_notes/docker-compose-secret-notes-green.yml up -d --build backend-green

  e2e-and-performance-tests:
    name: E2E & Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-green
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright E2E Tests
        run: npm run playwright
        env:
          BASE_URL: https://staging.conint-securenotes.online

      - name: Install k6
        run: |
          sudo apt update
          sudo apt install -y gnupg software-properties-common
          curl -s https://packagecloud.io/install/repositories/loadimpact/k6/script.deb.sh | sudo bash
          sudo apt install -y k6

      - name: Run k6 Performance Tests
        run: npm run k6


  switch-green-blue:
    name: Switch from Blue to Green
    runs-on: ubuntu-latest
    needs: e2e-and-performance-tests
    steps:
      - name: Switch from Blue to Green
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          script: |
            docker exec blue-green-proxy sh -c "
            sed -i \
              -e 's|set \\$active_frontend http://frontend-blue:80;|set \\$active_frontend http://frontend-green:80;|' \
              -e 's|set \\$active_backend http://backend-blue:3000;|set \\$active_backend http://backend-green:3000;|' \
              /etc/nginx/conf.d/blue-green.conf && \
            nginx -s reload"

  update-blue:
    name: Update Blue version and switch back to Blue
    runs-on: ubuntu-latest
    needs: switch-green-blue
    outputs:
      image-tag: ${{ steps.tag.outputs.image-tag }}
    steps:
      - name: Get commit SHA
        id: tag
        run: echo "image-tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Update Blue version
        uses: appleboy/ssh-action@v1
        env:
          BLUE_BACKEND_TAG: ${{ steps.tag.outputs.image-tag }}
          BLUE_FRONTEND_TAG: ${{ steps.tag.outputs.image-tag }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          envs: GREEN_BACKEND_TAG,GREEN_FRONTEND_TAG
          script: |
            cd /opt/CONINT && \
            echo 'Deploying Frontend to green...' && \
            docker-compose -f stacks/secret_notes/docker-compose-secret-notes-green.yml down frontend-blue && \
            IMAGE_TAG=${GREEN_FRONTEND_TAG} docker-compose -f stacks/secret_notes/docker-compose-secret-notes-blue.yml up -d --build frontend-blue && \
            echo 'Deploying Backend to green...' && \
            docker-compose -f stacks/secret_notes/docker-compose-secret-notes-blue.yml down backend-blue && \
            IMAGE_TAG=${GREEN_BACKEND_TAG} docker-compose -f stacks/secret_notes/docker-compose-secret-notes-blue.yml up -d --build backend-blue

      - name: Switch back to Blue
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          script: |
            docker exec blue-green-proxy sh -c "
            sed -i \
              -e 's|set \\$active_frontend http://frontend-green:80;|set \\$active_frontend http://frontend-blue:80;|' \
              -e 's|set \\$active_backend http://backend-green:3000;|set \\$active_backend http://backend-blue:3000;|' \
              /etc/nginx/conf.d/blue-green.conf && \
            nginx -s reload"
