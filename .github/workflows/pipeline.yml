name: Pipeline

on:
  push:
    branches:
      - main
      - production
      - build

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/backend

jobs:
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  vulnerability_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: snyk/actions/setup@master
      - uses: actions/setup-node@v4
      - name: Snyk monitor
        run: snyk monitor --all-projects --org=${{ secrets.SNYK_ORG }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Snyk test
        run: snyk test --all-projects --org=${{ secrets.SNYK_ORG }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test-backend:
    runs-on: ubuntu-latest
    needs: [ sast, vulnerability_scan ]
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm ci
      - run: npm run test -- --coverage
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage/lcov-report

#  test-frontend:
#    runs-on: ubuntu-latest
#    needs: [ sast, vulnerability_scan ]
#    defaults:
#      run:
#        working-directory: frontend
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-node@v4
#      - run: npm ci
#      - run: npm run test -- --coverage
#      - name: Archive code coverage results
#        uses: actions/upload-artifact@v4
#        with:
#          name: frontend-coverage-report
#          path: frontend/coverage/lcov-report

  build-deliver-backend-image:
    name: Build & Deliver Backend Image
    needs: test-backend
    secrets: inherit
    uses: ./.github/workflows/build-and-deliver.yml
    with:
      working-directory: backend
      dockerhub-repository: conint-securenotes-backend
      image-artifact-name: backend-image

  deploy-green:
    name: Deploy new Green version
    runs-on: ubuntu-latest
    needs: build-deliver-backend-image
    outputs:
      image-tag: ${{ steps.tag.outputs.image-tag }}
    steps:
      - name: Get commit SHA
        id: tag
        run: echo "image-tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Deploy new green version
        uses: appleboy/ssh-action@v1
        env:
          GREEN_BACKEND_TAG: ${{ steps.tag.outputs.image-tag }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          envs: GREEN_BACKEND_TAG
          script: |
            cd deployment
            sed -i "s/^GREEN_BACKEND_TAG=.*/GREEN_BACKEND_TAG=${GREEN_BACKEND_TAG}/" .env
            docker-compose pull green
            docker-compose up -d green

  switch-green-blue:
    name: Switch from Blue to Green
    runs-on: ubuntu-latest
    needs: deploy-green
    steps:
      - name: Switch from Blue to Green
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          script: |
            cd deployment/nginx/conf.d
            rm -f prod.conf
            ln -s green.conf prod.conf
            docker exec blue-green-proxy nginx -s reload

  update-blue:
    name: Update Blue version and switch back to Blue
    runs-on: ubuntu-latest
    needs: switch-green-blue
    steps:
      - name: Update Blue version
        uses: appleboy/ssh-action@v1
        env:
          BLUE_BACKEND_TAG: ${{ needs.deploy-green.outputs.image-tag }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          envs: BLUE_BACKEND_TAG
          script: |
            sleep 30
            cd deployment
            sed -i "s/^BLUE_BACKEND_TAG=.*/BLUE_BACKEND_TAG=${BLUE_BACKEND_TAG}/" .env
            docker-compose pull blue
            docker-compose up -d blue
      - name: Switch back to Blue
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          script: |
            cd deployment/nginx/conf.d
            rm -f prod.conf
            ln -s blue.conf prod.conf
            docker exec blue-green-proxy nginx -s reload